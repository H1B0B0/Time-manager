name: Elixir CI

on:
  push:
    tags:
      - "*"
    branches:
      - "main"
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    services:
      db:
        image: postgres:17
        ports: ["5432:5432"]
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
    name: Build and test
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: backend

    steps:
      - uses: actions/checkout@v4
      - name: Set up Elixir
        uses: erlef/setup-beam@61e01a43a562a89bfc54c7f9a378ff67b03e4a21 # v1.16.0
        with:
          elixir-version: "1.15.2" # [Required] Define the Elixir version
          otp-version: "26.0" # [Required] Define the Erlang/OTP version
      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
          restore-keys: ${{ runner.os }}-mix-
      - name: Install dependencies
        run: mix deps.get
      - name: Run tests
        run: mix test

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4
      - name: Start EC2 instance
        run: curl -X GET ${{ secrets.API_POINT }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ansible
      - name: Install Ansible
        run: |
          python -m pip install --user ansible
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Create SSH key file
        run: echo "${{ secrets.KEY }}" | tr -d '\r' > key.pem
      - name: Set permissions for SSH key
        run: chmod 600 key.pem
      - name: Create Ansible inventory file
        run: echo -e "[EC2]\n${{ secrets.HOSTS }}" > inventory.ini
      - name: Display Ansible inventory file
        run: cat inventory.ini
      - name: Wait for SSH to be available
        run: |
          for i in {1..30}; do
            ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.HOSTS }} 'echo SSH is available' && break
            echo "Waiting for SSH to be available..."
            sleep 10
          done
      - name: Run Ansible Playbook
        run: |
          ansible-playbook Playbook.yml -i inventory.ini --private-key key.pem --ssh-extra-args "-o StrictHostKeyChecking=no" --extra-vars "POSTGRES_USER=${{ secrets.POSTGRES_USER }} POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} POSTGRES_DB=${{ secrets.POSTGRES_DB }} DATABASE_HOSTNAME=${{ secrets.DATABASE_HOSTNAME }} PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} FRONTEND_DNS=${{ secrets.FRONTEND_DNS }} BACKEND_DNS=${{ secrets.BACKEND_DNS }} PGADMIN_DNS=${{ secrets.PGADMIN_DNS }} kuramacert=${{ secrets.kuramacert }} kuramakey=${{ secrets.kuramakey }}"

  mail:
    name: Send mail
    # needs: deploy
    runs-on: ubuntu-latest
    # if: startsWith(github.ref, 'refs/tags/')

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Read email content
        id: read_email_content
        # script multiline string
        run: |
          content=$(cat /src/content/release-0.0.md)
          echo "::set-output name=content::$content"

      - name: Send mail
        if: always()
        uses: dawidd6/action-send-mail@v2
        with:
          # mail server settings
          server_address: smtp.gmail.com
          server_port: 465
          # user credentials
          username: ${{ secrets.SMTP_PASSWORD }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Workflow Notification"
          body: ${{ steps.read_email_content.outputs.content }}
          # comma-separated string, send email to
          to: mroess365@gmail.com
          # from email name
          from: Batman
